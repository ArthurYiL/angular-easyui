/**
 * EasyUI for Angular 1.1.14
 * 
 * Copyright (c) 2009-2018 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the freeware license: https://www.jeasyui.com/license_freeware2.php
 * To use it on other terms please contact us: info@jeasyui.com
 *
 */
var __extends=this&&this.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return function(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}}();import{Component,forwardRef,ContentChild,Input}from"@angular/core";import{NG_VALUE_ACCESSOR}from"@angular/forms";import{ComboBaseComponent,COMBO_BASE_TEXTBOX_TEMPLATE}from"../base/combo-base.component";import{TreeGridComponent}from"../treegrid/treegrid.component";import{treeHelper}from"../base/treehelper";export var COMBOTREEGRID_TEMPLATE=COMBO_BASE_TEXTBOX_TEMPLATE+'\n\t<div #panel *ngIf="!panelClosed" \n\t\t\tclass="panel-body panel-body-noheader combo-panel combo-p"\n\t\t\t[style.left.px]="panelLeft"\n\t\t\t[style.top.px]="panelTop"\n\t\t\t[ngStyle]="panelStyle">\n\t\t<ng-content select="eui-treegrid"></ng-content>\n\t</div>\n';var ComboTreeGridComponent=function(_super){function ComboTreeGridComponent(){var _this=null!==_super&&_super.apply(this,arguments)||this;return _this.valueField="id",_this.textField="text",_this.editable=!1,_this.mappingTexts={},_this.displayingText=null,_this.inputingText=null,_this.treegridScrollTop=0,_this.updatingText=!1,_this._data=[],_this._text=null,_this._multiple=null,_this}return __extends(ComboTreeGridComponent,_super),Object.defineProperty(ComboTreeGridComponent.prototype,"data",{get:function(){return this._data},set:function(value){null==value&&(value=[]),this._data=value,this.treegrid&&(this.treegrid.data=this._data),this.updateText()},enumerable:!0,configurable:!0}),Object.defineProperty(ComboTreeGridComponent.prototype,"text",{get:function(){return this.focused||(null!=this.value&&null==this.displayingText&&this.updateText(),this._text=this.textFormatter(this.displayingText)),this._text},set:function(value){var _this=this;this._text=value,this.focused&&(this.inputingText=value,this.openPanel(),clearTimeout(this.timer),this.timer=setTimeout(function(){_this.doFilter(value)},this.delay))},enumerable:!0,configurable:!0}),Object.defineProperty(ComboTreeGridComponent.prototype,"multiple",{get:function(){return this.treegrid?this.treegrid.checkbox:this._multiple},set:function(value){this._multiple=value,this.treegrid&&null!=value&&(this.treegrid.checkbox=this._multiple)},enumerable:!0,configurable:!0}),ComboTreeGridComponent.prototype.ngAfterContentInit=function(){var _this=this;this.valueChange.subscribe(function(){_this.updatingText||_this.updateText()}),this.treegrid&&(this.treegrid.border=!1,this.treegrid.idField=this.valueField,this.treegrid.treeField=this.textField,null!=this._multiple&&(this.treegrid.checkbox=this._multiple),this.treegrid.data=this.data,this.treegrid.selectionChange.subscribe(function(selection){_this.multiple||(_this.value=selection?selection[_this.valueField]:null,_this.closePanel())}),this.treegrid.rowCheck.subscribe(function(row){_this.multiple&&!_this.updatingText&&(_this.value=_this.treegrid.checkedRows.map(function(row){return row[_this.valueField]}))}),this.treegrid.rowUncheck.subscribe(function(row){_this.multiple&&!_this.updatingText&&(_this.value=_this.treegrid.checkedRows.map(function(row){return row[_this.valueField]}))}))},ComboTreeGridComponent.prototype.doFilter=function(value){},ComboTreeGridComponent.prototype.openPanel=function(){this.panelClosed&&(_super.prototype.openPanel.call(this),this.treegrid&&(this.treegrid.scrollTop=this.treegridScrollTop))},ComboTreeGridComponent.prototype.closePanel=function(){this.panelClosed||(this.treegridScrollTop=this.treegrid.scrollTop,_super.prototype.closePanel.call(this))},ComboTreeGridComponent.prototype.updateText=function(){var _this=this;if(this.treegrid){if(this.updatingText=!0,null==this.value)this.mappingTexts={},this.displayingText=null,this.treegrid.selection=null,this.treegrid.checkbox&&this.treegrid.uncheckAllRows();else{var mt_1={},tt_1=[],ss=[];if(this.multiple){this.treegrid.uncheckAllRows();for(var _i=0,_a=this.value;_i<_a.length;_i++){var val=_a[_i];(row=this.findRow(val))&&this.treegrid.checkRow(row)}var vv_1=[];this.treegrid.checkedRows.forEach(function(row){vv_1.push(row[_this.valueField]),mt_1[row[_this.valueField]]=row[_this.textField],tt_1.push(row[_this.textField])}),this.value.filter(function(val){return-1==vv_1.indexOf(val)}).forEach(function(val){vv_1.push(val),mt_1[val]=_this.mappingTexts[val]||val,tt_1.push(mt_1[val])}),this.value=vv_1}else{var row=this.findRow(this.value);row?(mt_1[this.value]=row[this.textField],ss.push(row)):mt_1[this.value]=this.mappingTexts[this.value]||this.value,tt_1.push(mt_1[this.value]),this.treegrid.selection=ss.length?ss[0]:null}this.mappingTexts=mt_1,this.displayingText=tt_1.join(this.separator)}this.updatingText=!1}},ComboTreeGridComponent.prototype.findRow=function(value){return treeHelper.findNode(this.data,this.valueField,value)},ComboTreeGridComponent.decorators=[{type:Component,args:[{selector:"eui-combotreegrid",template:COMBOTREEGRID_TEMPLATE,providers:[{provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(function(){return ComboTreeGridComponent}),multi:!0}],host:{"[class.f-inline-row]":"true","[class.f-field]":"true"}}]}],ComboTreeGridComponent.propDecorators={treegrid:[{type:ContentChild,args:[TreeGridComponent]}],valueField:[{type:Input}],textField:[{type:Input}],editable:[{type:Input}],data:[{type:Input}],text:[{type:Input}],multiple:[{type:Input}]},ComboTreeGridComponent}(ComboBaseComponent);export{ComboTreeGridComponent};